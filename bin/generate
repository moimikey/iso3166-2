#!/usr/bin/env node

// ISO 3166-2 database generator tool
// based off of my ISO 3166-1 database generator tool
// basically i cloned it and renamed shit.

// The MIT License (MIT)

// Copyright (c) 2015 Michael Scott Hertzberg

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import fs          from 'fs'
import path        from 'path'
import es          from 'event-stream'
import json        from 'jsonstream2'
import request     from 'request'
import csv2        from 'csv2'
import reduce      from 'through2-reduce'
import jsesc       from 'jsesc'
import stripquotes from 'stripquotes'
import zlib        from 'zlib'
import size        from 'file-size'

let countries = []

request.get('https://raw.githubusercontent.com/awjrichards/WLM-ISO-3166-2/master/iso3166-2-data.txt')
  .pipe(csv2())
  .pipe(reduce({ objectMode: true }, (result, line, i) => {
    // CSV heads at index 0, so we skip over
    if (i === 0) return result

    if (!result[line[8]]) {
      result[line[8]] = {}
      result[line[8]].country = {
        name: jsesc(stripquotes(line[0])),
        iso3: line[9]
      }
      result[line[8]].subdivisions = []
    }

    if(!line[2]) return result

    result[line[8]].subdivisions.push(
      jsesc(stripquotes(line[2]))
    )

    return result
  }, {}))
  .on('data', data => {
    countries.push(data)
  })
  .on('end', () => {
    const output = path.join(__dirname, '../', 'data/countries.json.gz')
    return es.readArray(countries)
    .pipe(json.stringify())
    .pipe(zlib.createGzip())
    .pipe(fs.createWriteStream(output))
    .on('finish', () => {
      console.log('OK. Built!', size(fs.statSync(output).size).human('SI'))
    })
  })
